using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class QuestionPicker : MonoBehaviour
{
    public static QuestionPicker Instance { get; private set; }

    private Dictionary<MathOp, string> mathOpToString;

    public List<QuestionData> premadeQuestions;

    public List<TextAsset> listFiles;
    private Dictionary<ListType, List<string>> itemLists;

    public List<Sprite> sprites;

    private void Awake()
    {
        Instance = this;

        mathOpToString = new Dictionary<MathOp, string>() { { MathOp.Sum, "+" }, { MathOp.Sub, "-" }, { MathOp.Mul, "×" }, { MathOp.Div, "÷" } };

        itemLists = new Dictionary<ListType, List<string>>();
        for (int i = 0; i < listFiles.Count; i++)
            itemLists[(ListType)i] = new List<string>(listFiles[i].text.Split(new[] { '\r', '\n' }, System.StringSplitOptions.RemoveEmptyEntries));
    }

    public QuestionData Generate(QuestionType type)
    {
        string question = "";
        string correctAnswer = "";
        string[] wrongAnswers = new string[3];
        Sprite questionSprite = null;

        if (type == QuestionType.Any)
            type = (QuestionType)Random.Range(1, System.Enum.GetNames(typeof(QuestionType)).Length);

        switch (type)
        {
            //Full random numeric questions
            case QuestionType.Numeric:
                int firstOperand, secondOperand, result;
                MathOp operation = (MathOp)Random.Range(0, 4);

                switch (operation)
                {
                    case MathOp.Sum:
                        firstOperand = Random.Range(0, 51);
                        secondOperand = Random.Range(0, 51);
                        result = firstOperand + secondOperand;
                        break;
                    case MathOp.Sub:
                        firstOperand = Random.Range(0, 51);
                        secondOperand = Random.Range(0, 51);
                        result = firstOperand - secondOperand;
                        break;
                    case MathOp.Mul:
                        firstOperand = Random.Range(0, 21);
                        secondOperand = Random.Range(0, 21);
                        result = firstOperand * secondOperand;
                        break;
                    case MathOp.Div:
                        firstOperand = Random.Range(0, 21);
                        do
                            secondOperand = Random.Range(1, 21);
                        while (firstOperand % secondOperand != 0);
                        result = firstOperand / secondOperand;
                        break;
                    default:
                        firstOperand = secondOperand = result = 0;
                        break;
                }

                question = string.Format("Quanto fa {0} {1} {2}?", firstOperand, mathOpToString[operation], secondOperand);
                correctAnswer = result.ToString();
                for (int i = 0; i < wrongAnswers.Length; i++)
                    wrongAnswers[i] = (result - (i + 1) * Random.Range(1, 8)).ToString();
                break;

            //Full prepared question
            case QuestionType.Premade:
                QuestionData randomQ = premadeQuestions[Random.Range(0, premadeQuestions.Count)];
                question = randomQ.question;
                correctAnswer = randomQ.correctAnswer;
                wrongAnswers = randomQ.wrongAnswers;
                break;

            //Random generated by mixing list content
            case QuestionType.ByList:
                ListType rightCategory = (ListType)Random.Range(0, itemLists.Count);
                question = string.Format("Quali di questi è {0}?", itemLists[rightCategory][0]);
                correctAnswer = itemLists[rightCategory][Random.Range(1, itemLists[rightCategory].Count)];
                ListType wrongCategory;

                for (int i = 0; i < wrongAnswers.Length; i++)
                {
                    do
                        wrongCategory = (ListType)Random.Range(0, itemLists.Count);
                    while (wrongCategory == rightCategory);

                    wrongAnswers[i] = itemLists[wrongCategory][Random.Range(1, itemLists[wrongCategory].Count)];
                }
                break;

            //Random generated by mixing images
            case QuestionType.ByImage:
                List<int> indexes = new List<int>();

                for (int i = 0, index = 0; i < 4; i++)
                {
                    do
                        index = Random.Range(0, sprites.Count);
                    while (indexes.Contains(index));
                    indexes.Add(index);
                }

                question = "Cosa rappresenta questa immagine?";
                questionSprite = sprites[indexes[0]];
                correctAnswer = sprites[indexes[0]].name;

                for (int i = 0; i < wrongAnswers.Length; i++)
                    wrongAnswers[i] = sprites[indexes[i + 1]].name;
                break;

            default:
                Debug.LogError("This question type doesn't exist");
                break;
        }

        QuestionData data = ScriptableObject.CreateInstance<QuestionData>();
        data.question = question;
        data.correctAnswer = correctAnswer;
        data.wrongAnswers = wrongAnswers;
        data.questionSprite = questionSprite;

        return data;
    }
}
